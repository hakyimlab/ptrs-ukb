import argparse
parser = argparse.ArgumentParser(prog='gwas_ht_to_tsv.py', description='''
    Convert GWAS results from hail runs (in hail Table format)
    generated by gwas_on_subset_ht.py
    to TSV format for each item in inner list.
    The output format follows GWAS summary statistics TSVs from Neale's lab. 
''')

parser.add_argument('--gwas-ht', required=True, help='''
    GWAS results from hail run. 
    It should be hail Table. 
''')

parser.add_argument('--output-prefix', required=True, help='''
    The prefix of output files. 
    The naming rule is: 
    args.output_prefix + '_' + list_name + '_x_' + inner_list_name + '.tsv'
''')

parser.add_argument('--hail-log', default=None, help='''
    Path of hail log file.
    The default is args.output_prefix + '.log'
''')


args = parser.parse_args()

import hail as hl
import logging, os, time, sys
import my_hail_helper as myhelper


# configing util
logging.basicConfig(
    level = logging.INFO, 
    stream = sys.stderr, 
    format = '%(asctime)s  %(message)s',
    datefmt = '%Y-%m-%d %I:%M:%S %p'
)

# input sanity check
if args.hail_log is None:
    args.hail_log = args.output_prefix + '.log'

# some hail environment logging before run
logging.info('echo $PYSPARK_SUBMIT_ARGS')
os.system('echo $PYSPARK_SUBMIT_ARGS')

# initialize hail
logging.info('Initialize hail')
hl.init(log = args.hail_log)

# read hail Tables
logging.info('Read GWAS results saved in hail Table')
gwas_out = hl.read_table(args.gwas_ht)

# add variant column
logging.info('Adding `variant` column: chr:pos:ref:alt')
gwas_out = gwas_out.annotate( 
    variant = hl.delimit(
        hl.array([
            gwas_out['locus'].contig,
            hl.str(gwas_out['locus'].position),
            gwas_out['alleles'][0],
            gwas_out['alleles'][1]
        ]), 
    delimiter = ':')
)

# change the key of Table to variant
logging.info('Changing the key of Table to `variant` column')
gwas_out = gwas_out.key_by('variant')
gwas_out = gwas_out.repartition(40)
gwas_out = gwas_out.cache()

# exporting TSV
logging.info('Looping over list of trait lists and output TSVs')
phenotypes = gwas_out['phenotypes'].collect()[0]   # note that this annotation `phenotypes` was added by gwas_on_subset_ht.py!
for i, subset in enumerate(phenotypes):
    for j, trait in enumerate(subset):
        ht_export = myhelper.gwas_formater_from_neale_lab(gwas_out, i, j)
        filename = '{prefix}_{trait}.tsv'.format(prefix = args.output_prefix, trait = trait)
        if not os.path.exists(filename):
            ht_export.export(filename)

