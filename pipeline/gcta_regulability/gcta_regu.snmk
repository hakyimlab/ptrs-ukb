if 'outdir' not in config:
    config['outdir'] = 'output'

def get_pheno(config):
    return config['pheno_covar']['yaml'].split(',')
    
phenotypes = get_pheno(config)

rule subset_pred_expr_by_indiv:
    input:
        pred_expr = config['pred_expr'],  # with gene_model as key
        indiv_list = config['indiv_list']  # with pop_name as key
    output:
        '{outdir}/pred_expr_{gene_model}_x_{pop_name}.tsv'
    shell:
        'python ../code/subset_pred_expr_by_indiv.py \
           --pred-expr {input.pred_expr} \
           --indiv-list {input.indiv_list} \
           --output {output[0]}'

rule subset_pheno_covar_by_indiv:
    input:
        pheno_covar_table = config['pheno_covar']['table'],  # with {table_name} as key (here we only have one table actually so it is a bit redundent)
        indiv_list = config['indiv_list'],  # with pop_name as key
        pheno_covar_yaml = config['pheno_covar']['yaml']  # specifying which column is used as phenotype or covariates (the same as the one used for GWAS runs)
    output:
        '{outdir}/pheno_{table_name}_x_{pop_name}.tsv',
        '{outdir}/covar_{table_name}_x_{pop_name}.tsv'
    shell:
        'python ../code/subset_pheno_covar_by_indiv.py \
           --pheno-covar-csv {input.pheno_covar_csv} \
           --indiv-list {input.indiv_list} \
           --pheno-covar-yaml {input.pheno_covar_yaml} \
           --output-pheno {output[0]} \
           --output-covar {output[1]}'

rule prepare_gcta_inputs:
    input:
        '{outdir}/pheno_{table_name}_x_{pop_name}.tsv',
        '{outdir}/covar_{table_name}_x_{pop_name}.tsv',
        '{outdir}/pred_expr_{gene_model}_x_{pop_name}.tsv'
    params: 
        '{output}/gcta_{table_name}_x_{gene_model}_x_{pop_name}.',
        '{output}/gcta_{table_name}_x_{gene_model}_x_{pop_name}_x_'
    output:
        grm1 = '{output}/gcta_{table_name}_x_{gene_model}_x_{pop_name}.grm.gz'
        grm2 = '{output}/gcta_{table_name}_x_{gene_model}_x_{pop_name}.grm.id',
        phenos = [ '{{output}}/gcta_{{table_name}}_x_{{gene_model}}_x_{{pop_name}}_x_{pheno}.pheno'.format(pheno = i) for i in phenotypes  ],
        covar = '{output}/gcta_{table_name}_x_{gene_model}_x_{pop_name}.covar'
    shell:
        'python ../code/prepare_gcta_inputs.py \
           --pred-expr {input[2]} \
           --pheno {input[0]} \
           --covar {input[1]} \
           --output-grm-prefix {params[0]} \
           --output-pheno-prefix {params[1]} \
           --output-covar {output.covar}'