if 'outdir' not in config:
    config['outdir'] = 'output'

genelist_args = ''
if 'gene_list' in config:
    genelist_args = '--gene-list {}'.format(config['gene_list'])

sys.path.insert(0, '../../code/')
from gwas_helper import read_yaml

def get_pheno(config):
    mydic = read_yaml(config['pheno_covar']['yaml'])
    return mydic['pheno_names'].split(',')
    
phenotypes = get_pheno(config)

## Important note:
## when I say with *** as key, it is not required but optional

if 'gene_model' in config:
    rule all_format:
        input:
            '{outdir}/pheno_{table_name}_x_{pop_name}.tsv'.format(outdir = config['outdir'], table_name = config['table_name'], pop_name = config['pop_name']),
            '{outdir}/covar_{table_name}_x_{pop_name}.tsv'.format(outdir = config['outdir'], table_name = config['table_name'], pop_name = config['pop_name']),
            '{outdir}/pred_expr_{gene_model}_x_{pop_name}.tsv'.format(outdir = config['outdir'], gene_model = config['gene_model'], pop_name = config['pop_name'])

    rule all_gcta:
        input:
            [ '{outdir}/reml_from_gcta_{table_name}_x_{gene_model}_x_{pop_name}_x_{pheno}.hsq'.format(
                outdir = config['outdir'],
                table_name = config['table_name'],
                gene_model = config['gene_model'],
                pop_name = config['pop_name'],
                pheno = p
                ) for p in phenotypes ]

    rule all_hail:
        input:
            '{outdir}/reml_from_hail_{table_name}_x_{gene_model}_x_{pop_name}.tsv'.format(
                outdir = config['outdir'],
                table_name = config['table_name'],
                gene_model = config['gene_model'],
                pop_name = config['pop_name']
            )
elif 'gene_model_yaml' in config:
    if config['mode'] in ('naive', 'tissue_svd'):
        rule all_hail_multi:
            input:
                '{outdir}/reml_from_hail-multi-tissue-{mode}_x_{table_name}_x_{gene_model_list_name}_x_{pop_name}.tsv'.format(
                    outdir = config['outdir'],
                    table_name = config['table_name'],
                    gene_model_list_name = config['gene_model_list_name'],
                    pop_name = config['pop_name'],
                    mode = config['mode']
                )
    elif config['mode'] == 'tissue_svd_train':
        rule all_hail_multi_train:
            input:
                '{outdir}/PCA-multi-tissue-{mode}_x_{table_name}_x_{gene_model_list_name}_x_{pop_name}.hdf5'.format(
                    outdir = config['outdir'],
                    table_name = config['table_name'],
                    gene_model_list_name = config['gene_model_list_name'],
                    pop_name = config['pop_name'],
                    mode = config['mode']
                )


rule subset_pred_expr_by_indiv:
    input:
        pred_expr = config['pred_expr'],  # with gene_model as key
        indiv_list = config['indiv_list']  # with pop_name as key
    output:
        '{outdir}/pred_expr_{gene_model}_x_{pop_name}.tsv'
    shell:
        'python ../../code/subset_pred_expr_by_indiv.py \
           --pred-expr {input.pred_expr} \
           --indiv-list {input.indiv_list} \
           --output {output[0]}'

rule subset_pheno_covar_by_indiv:
    input:
        pheno_covar_csv = config['pheno_covar']['table'],  # with {table_name} as key (here we only have one table actually so it is a bit redundent)
        indiv_list = config['indiv_list'],  # with pop_name as key
        pheno_covar_yaml = config['pheno_covar']['yaml']  # specifying which column is used as phenotype or covariates (the same as the one used for GWAS runs)
    output:
        '{outdir}/pheno_{table_name}_x_{pop_name}.tsv',
        '{outdir}/covar_{table_name}_x_{pop_name}.tsv'
    shell:
        'python ../../code/subset_pheno_covar_by_indiv.py \
           --pheno-covar-csv {input.pheno_covar_csv} \
           --indiv-list {input.indiv_list} \
           --pheno-covar-yaml {input.pheno_covar_yaml} \
           --output-pheno {output[0]} \
           --output-covar {output[1]}'

rule prepare_gcta_inputs:
    input:
        '{outdir}/pheno_{table_name}_x_{pop_name}.tsv',
        '{outdir}/covar_{table_name}_x_{pop_name}.tsv',
        '{outdir}/pred_expr_{gene_model}_x_{pop_name}.tsv'
    params: 
        '{outdir}/gcta_{table_name}_x_{gene_model}_x_{pop_name}',
        '{outdir}/gcta_{table_name}_x_{gene_model}_x_{pop_name}_x_'
    output:
        grm1 = '{outdir}/gcta_{table_name}_x_{gene_model}_x_{pop_name}.grm.gz',
        grm2 = '{outdir}/gcta_{table_name}_x_{gene_model}_x_{pop_name}.grm.id',
        phenos = [ '{{outdir}}/gcta_{{table_name}}_x_{{gene_model}}_x_{{pop_name}}_x_{pheno}.pheno'.format(pheno = i) for i in phenotypes  ],
        covar = '{outdir}/gcta_{table_name}_x_{gene_model}_x_{pop_name}.covar'
    shell:
        'python ../../code/prepare_gcta_inputs.py \
           --pred-expr {input[2]} \
           --pheno {input[0]} \
           --covar {input[1]} \
           --output-grm-prefix {params[0]} \
           --output-pheno-prefix {params[1]} \
           --output-covar {output.covar}'

rule run_gcta:
    input:
        grm1 = '{outdir}/gcta_{table_name}_x_{gene_model}_x_{pop_name}.grm.gz',
        grm2 = '{outdir}/gcta_{table_name}_x_{gene_model}_x_{pop_name}.grm.id',
        pheno = '{outdir}/gcta_{table_name}_x_{gene_model}_x_{pop_name}_x_{pheno}.pheno',
        covar = '{outdir}/gcta_{table_name}_x_{gene_model}_x_{pop_name}.covar'
    output:
        '{outdir}/reml_from_gcta_{table_name}_x_{gene_model}_x_{pop_name}_x_{pheno}.hsq'
    params:
        grmpref = '{outdir}/gcta_{table_name}_x_{gene_model}_x_{pop_name}',
        outpref = '{outdir}/reml_from_gcta_{table_name}_x_{gene_model}_x_{pop_name}_x_{pheno}'
    shell:
        '{config[gcta_path]} \
          --reml \
          --grm-gz {params.grmpref} \
          --pheno {input.pheno} \
          --qcovar {input.covar} \
          --out {params.outpref}'

rule run_hail:
    input:
        mat = '{outdir}/pred_expr_{gene_model}_x_{pop_name}.tsv',
        pheno = '{outdir}/pheno_{table_name}_x_{pop_name}.tsv',
        covar = '{outdir}/covar_{table_name}_x_{pop_name}.tsv'
    output:
        '{outdir}/reml_from_hail_{table_name}_x_{gene_model}_x_{pop_name}.tsv'
    shell:
        'python ../../code/estimate_hsq.py \
          --trait-table {input.pheno}::eid \
          --covar-table {input.covar}::eid \
          --predictor-table {input.mat}::gene \
          --output {output[0]} \
          --inv-norm-predictor \
          {genelist_args} \
          --with-intercept'

## For multi-tissue analysis
if 'gene_model_yaml' in config:
    tmp = read_yaml(config['gene_model_yaml'])
    gene_model_list = tmp.values()
    if config['mode'] == 'naive':
        rule run_multi:
            input:
                mat = [ '{{outdir}}/pred_expr_{gene_model}_x_{{pop_name}}.tsv'.format(gene_model = g) for g in gene_model_list ],
                pheno = '{outdir}/pheno_{table_name}_x_{pop_name}.tsv',
                covar = '{outdir}/covar_{table_name}_x_{pop_name}.tsv',
                yaml = config['gene_model_yaml']
            params:
                prefix = '{outdir}/pred_expr_',
                suffix = '_x_{pop_name}.tsv'
            output:
                '{outdir}/reml_from_hail-multi-tissue-{mode}_x_{table_name}_x_{gene_model_list_name}_x_{pop_name}.tsv'
            shell:
                'python ../../code/estimate_hsq_multi_tissue.py \
                  --trait-table {input.pheno}::eid \
                  --covar-table {input.covar}::eid \
                  --predictor-table-prefix {params.prefix} \
                  --predictor-table-suffix {params.suffix} \
                  --predictor-table-yaml {input.yaml} \
                  --predictor-gene-column gene \
                  --output {output[0]} \
                  --inv-norm-predictor \
                  --with-intercept \
                  --mode {wildcards.mode}'
    elif config['mode'] == 'tissue_svd_train':
        rule run_multi_train:
            input:
                mat = [ '{{outdir}}/pred_expr_{gene_model}_x_{{pop_name}}.tsv'.format(gene_model = g) for g in gene_model_list ],
                pheno = '{outdir}/pheno_{table_name}_x_{pop_name}.tsv',
                covar = '{outdir}/covar_{table_name}_x_{pop_name}.tsv',
                yaml = config['gene_model_yaml']
            params:
                prefix = '{outdir}/pred_expr_',
                suffix = '_x_{pop_name}.tsv'
            output:
                '{outdir}/PCA-multi-tissue-{mode}_x_{table_name}_x_{gene_model_list_name}_x_{pop_name}.hdf5'
            shell:
                'python ../../code/estimate_hsq_multi_tissue.py \
                  --trait-table {input.pheno}::eid \
                  --covar-table {input.covar}::eid \
                  --predictor-table-prefix {params.prefix} \
                  --predictor-table-suffix {params.suffix} \
                  --predictor-table-yaml {input.yaml} \
                  --predictor-gene-column gene \
                  --output {output[0]} \
                  --mode {wildcards.mode}'
    elif  config['mode'] == 'tissue_svd':
        if 'pc_model' not in config:
            raise ValueError('When running with mode=tissue_svd, please specify pc_model in config')
        rule run_multi:
            input:
                mat = [ '{{outdir}}/pred_expr_{gene_model}_x_{{pop_name}}.tsv'.format(gene_model = g) for g in gene_model_list ],
                pheno = '{outdir}/pheno_{table_name}_x_{pop_name}.tsv',
                covar = '{outdir}/covar_{table_name}_x_{pop_name}.tsv',
                yaml = config['gene_model_yaml'],
                pc = config['pc_model']
            params:
                prefix = '{outdir}/pred_expr_',
                suffix = '_x_{pop_name}.tsv'
            output:
                '{outdir}/reml_from_hail-multi-tissue-{mode}_x_{table_name}_x_{gene_model_list_name}_x_{pop_name}.tsv'
            shell:
                'python ../../code/estimate_hsq_multi_tissue.py \
                  --trait-table {input.pheno}::eid \
                  --covar-table {input.covar}::eid \
                  --predictor-table-prefix {params.prefix} \
                  --predictor-table-suffix {params.suffix} \
                  --predictor-table-yaml {input.yaml} \
                  --predictor-gene-column gene \
                  --output {output[0]} \
                  --inv-norm-predictor \
                  --with-intercept \
                  --mode {wildcards.mode} \
                  --pc-model {input.pc}'     
